pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: setActiveEnv
    type: string
    default: none
    values:
      - none
      - dev
      - stg
      - prd

variables:
  # - group: npmTokens # environment variables used in .npmrc file
  - name: NODE_VERSION
    value: '16.13.0' # should correspond .nvmrc file
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: isScheduled
    value: $[eq(variables['Build.Reason'], 'Schedule')]
  - name: isPullRequest
    value: $[eq(variables['Build.Reason'], 'PullRequest')]
  - name: isMainBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - name: isDevelopBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}
  - name: isFeatureBranch
    value: ${{ notIn(variables['Build.SourceBranch'], 'refs/heads/develop', 'refs/heads/main') }}
  - name: activeEnvironment
    ${{ if ne(parameters.setActiveEnv, 'none') }}:
      value: ${{ parameters.setActiveEnv }}
    ${{ elseif eq(variables.isMainBranch, True) }}:
      value: prd
    ${{ elseif eq(variables.isDevelopBranch, True) }}:
      value: stg
    ${{ else }}:
      value: dev
  - template: scripts/pipeline/variables.yaml
    parameters:
      ENVIRONMENT: ${{ variables.activeEnvironment }}

stages:
  - stage: analyse
    displayName: Analyse ${{ variables.environment_name }}
    condition: eq(variables.isScheduled, 'true')
    jobs:
      - job: analyse
        displayName: Analyse
        steps:
          - template: scripts/pipeline/npm-install.yaml
          # - template: scripts/pipeline/stage-analyse.yaml

  - stage: build
    displayName: Build ${{ variables.environment_name }}
    condition: eq(variables.isScheduled, 'false')
    jobs:
      - job: build
        displayName: Build
        steps:
          - template: scripts/pipeline/npm-install.yaml
          # - template: scripts/pipeline/stage-build.yaml

  - stage: test
    displayName: Test ${{ variables.environment_name }}
    condition: eq(variables.isScheduled, 'false')
    dependsOn:
      - build
    jobs:
      - job: test
        displayName: Test
        steps:
          - template: scripts/pipeline/npm-install.yaml
          # - template: scripts/pipeline/stage-test.yaml

  - stage: deploy
    displayName: Deploy ${{ variables.environment_name }}
    condition: eq(variables.isScheduled, 'false')
    dependsOn:
      - test
    jobs:
      # - template: scripts/pipeline/stage-deploy.yaml
